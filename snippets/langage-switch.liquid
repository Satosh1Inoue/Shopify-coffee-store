<localization-form>
    {%- form 'localization', id: 'FooterLanguageForm', class: 'localization-form' -%}
    <div class="no-js-hidden">
        <div class="disclosure lang_btn_style">
            <button type="button"
                class="disclosure__button link link--text caption-large lang-btn"
                aria-expanded="false" aria-controls="FooterLanguageList" aria-describedby="FooterLanguageLabel">
                Language<br>{{ localization.language.endonym_name | capitalize }}
            </button>
            <ul id="FooterLanguageList" role="list" class="disclosure__list list-unstyled"
                hidden>
                {%- for language in localization.available_languages -%}
                <li class="disclosure__item" tabindex="-1">
                    <a class="link link--text disclosure__link caption-large{% if language.iso_code == localization.language.iso_code %} disclosure__link--active{% endif %} focus-inset"
                        href="#" hreflang="{{ language.iso_code }}" lang="{{ language.iso_code }}" {% if
                        language.iso_code==localization.language.iso_code %} aria-current="true" {% endif %}
                        data-value="{{ language.iso_code }}">
                        {{ language.endonym_name | capitalize }}
                    </a>
                </li>
                {%- endfor -%}
            </ul>
        </div>
        <input type="hidden" name="locale_code" value="{{ localization.language.iso_code }}">
    </div>
    {%- endform -%}
</localization-form>

<script>
    class LocalizationForm extends HTMLElement {
        constructor() {
            super();
            this.elements = {
                input: this.querySelector('input[name="locale_code"], input[name="country_code"]'),
                button: this.querySelector('button'),
                panel: this.querySelector('ul'),
            };
            this.elements.button.addEventListener('click', this.openSelector.bind(this));
            this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
            this.addEventListener('keyup', this.onContainerKeyUp.bind(this));

            this.querySelectorAll('a').forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
        }

        hidePanel() {
            this.elements.button.setAttribute('aria-expanded', 'false');
            this.elements.panel.setAttribute('hidden', true);
        }

        onContainerKeyUp(event) {
            if (event.code.toUpperCase() !== 'ESCAPE') return;

            this.hidePanel();
            this.elements.button.focus();
        }

        onItemClick(event) {
            event.preventDefault();
            const form = this.querySelector('form');
            this.elements.input.value = event.currentTarget.dataset.value;
            if (form) form.submit();
        }

        openSelector() {
            this.elements.button.focus();
            this.elements.panel.toggleAttribute('hidden');
            this.elements.button.setAttribute('aria-expanded', (this.elements.button.getAttribute('aria-expanded') === 'false').toString());
        }

        closeSelector(event) {
            const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
            if (event.relatedTarget === null || shouldClose) {
                this.hidePanel();
            }
        }
    }

    customElements.define('localization-form', LocalizationForm);      
</script>

<style>
  .lang-btn {
   margin-bottom: 0 !important;
   margin-top: 0 !important;
   margin-left: 5em;
   padding: 0 0 0 0 !important;
   white-space: nowrap;
 }

</style>